// Generated by IcedCoffeeScript 1.2.0u
(function() {
  var app, authError, authenticateUser, bcrypt, checkPassword, createUser, generateUserToken;

  bcrypt = require('bcrypt');

  app = require('./app');

  authError = function() {
    var e;
    e = new Error('Authentication Failed');
    e.type = 'auth';
    return e;
  };

  checkPassword = function(pwd, actual, cb) {
    return bcrypt.compare(pwd, actual, function(err, result) {
      if (err != null) return cb(err);
      if (!result) return cb(authError());
      return cb(null, result);
    });
  };

  generateUserToken = function(user, cb) {
    return app.generateID('sessiontoken', function(err, token) {
      if (err != null) return cb(err);
      return redis.hgetall('user:' + user, function(err, user_details) {
        if (err != null) return cb(err);
        return redis.hsetall('sessiontoken:' + token, user_details, function(err, result) {
          if (err != null) return cb(err);
          return cb(null, result);
        });
      });
    });
  };

  authenticateUser = function(user, pwd, cb) {
    return redis.get('user.password:' + user, function(err, result) {
      if (err != null) return cb(err);
      return checkPassword(pwd, result, function(err, result) {
        if (err != null) return cb(err);
        return generateUserToken(user, function(err, result) {
          if (err != null) return cb(err);
          return cb(result);
        });
      });
    });
  };

  createUser = function(uid, pwd, handle) {};

}).call(this);
